"""
Django settings for histo_udec project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Cargar variables de entorno desde .env
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-sbklyij(w01(9+cua9do+ivo8%2ff*)rj12@oachcik8(=%vh*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['histopatoudec.udec.cl', 'www.histopatoudec.udec.cl', 'localhost', '127.0.0.1', 'histoflashcards.onrender.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'flashcards'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'histo_udec.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'histo_udec.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if os.environ.get('DJANGO_ENV') == 'production':
    # Production database settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DB_NAME', 'histopatoudec'),
            'USER': os.environ.get('DB_USER', 'histopatoudec'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'XgGffyrhFT'),
            'HOST': os.environ.get('DB_HOST', '127.0.0.1'),  # Usually localhost in production
            'PORT': os.environ.get('DB_PORT', '3306'),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'charset': 'utf8mb4',  # Support for full Unicode character set
            },
            'CONN_MAX_AGE': 60,  # Keep connections alive for 60 seconds
        }
    }
elif os.environ.get('USE_SQLITE', 'False') == 'True':
    # SQLite fallback for development when MySQL is not available
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Development database settings with MySQL and automatic fallback to SQLite
    mysql_config = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'histopatoudec',
        'USER': os.environ.get('DB_USER', 'histopatoudec'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'XgGffyrhFT'),
        'HOST': os.environ.get('DB_HOST', 'wordpress.udec.cl'),
        'PORT': os.environ.get('DB_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
    
    # Intentar conectar a MySQL y cambiar a SQLite si falla
    try:
        import MySQLdb
        conn = MySQLdb.connect(
            host=mysql_config['HOST'],
            user=mysql_config['USER'],
            passwd=mysql_config['PASSWORD'],
            port=int(mysql_config['PORT']),
            connect_timeout=3,  # Timeout corto para no bloquear la aplicaci√≥n
        )
        conn.close()
        print("‚úÖ Conexi√≥n a MySQL exitosa, usando MySQL como base de datos.")
        DATABASES = {'default': mysql_config}
    except Exception as e:
        print(f"‚ùå Error al conectar a MySQL: {e}")
        print("üîÑ Cambiando autom√°ticamente a SQLite como fallback...")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "flashcards/static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "flashcards/static/media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
